Este archivo se convertirá en un log de los apuntes sobre las prácticas utilizadas, los problemas encontrados, y las soluciones dadas a estos problemas.

Cuando eramos niños los personajes que más nos interesaban y entretenían eran los heroes. Esos personajes casi mágicos que representaban todo lo que era bueno y justo, que con sus poderes protegían la tierra de las fuerzas del mal. (Vamos aceptenlo, alguno de ustedes en algún momento quisieron ser, jugaron a ser, y/o se disfrazaron de alguno de ellos)

Pero que es un buen heroe si no tiene con quien batallar??
Respuesta 1: Una persona que sólo juega a disfrazarse (considerando que la gran mayoría de los heroes que recuerdo eran adultos, bastante raro y bizarro si me lo preguntan)
Respuesta 2: Solo un tipo más con delirio de grandeza (y de esos ya tenemos demaciados, sobre todo en la politica)
Respuesta 3: Un peligro potencial para el mundo

Así que quiero hacerle homenaje a esos personajes que hacen que estos heroes brillen, estos personajes que de pequeños odiamos, pero de jovenes y adultos nos parecen, incluso, más interesantes que los mismos heroes. Una ronda de aplausos para estos personajes que llevan a los heroes a sus limites, que los hacen fuertes, que los hacen demostrar de lo que estan hechos... los archivillanos, las nemesis!!!!! (パチパチパチ)
 
Porque siempre hablar de los heroes, si ellos sólo son tan buenos como los villanos que enfrentan?
 
El proyecto que trabajaremos será una wiki sobre esos personajes cuyos sus ideales y valores difieren de lo que muchos aceptan como bueno o justo, pero sin embargo sus historias nos atrapan y, que aunque algunos no quieran aceptarlo, nos apasionan. 
Así que sin más carreta, contruyamos una wiki de villanos.

----------------------------------------------
	0. Antes de empezar
----------------------------------------------
Quisiera agradecerle a una persona muy importante en mi vida, ya que no sería nada sin esa persona, ni siquiera podría estar escribiendo toda esto (No tengan ideas niños... Hey tu! baja ese arma!!), esa persona que me ha acompañado a salir de las malas situaciones de la vida.... Gracias YO, de no ser por ti, hoy no estaríamos aquí. (Algunos se preguntaran eso que tiene de bueno, no?? jajajajaja)

Dejando las bromas de lado, quisiera escribir algunas líneas de desarrollo, que se seguirán durante el ejercicio.
一つ (1.) Trabajaremos sobre un servidor Tomcat (esto podría cambiar en alguno de los ejercicios subsiguientes).
二つ　(2.) Trabajaremos con la versión JAVA 1.6 (esto podría cambiar en alguno de los ejercicios subsiguientes).
三つ　(3.) Cada commit en el repositorio representa un paso adicional en el proceso, y nos ayudará a documentar todo el proceso de desarrolo, y su evolución.
四つ　(4.) Si en el camino me doy cuenta que falto documentar algo, es posible que las secciones ya escritas cambien, pero intantaré documentar los cambios hechos para evitar confuciones, y que se omita información valiosa.
五つ　(5.) El código aquí escrito es completamente de uso libre, y sólo tiene propósito de aprendizaje, así que por favor si les parece interesante y creen que le puede ayudar a alguien más, REPARTANLO. (el código aclaro, lo demás corre por su cuenta, y no me interesa saberlo)
六つ　(6.) El IDE de desarrollo que usaré es eclipse, pero pueden usar el IDE de su elección. USare encoding UTF-8 para todo, así que por favor configuren sus IDEs de esta manera para que no se encuentren caracteres raros en los ejercicios.
六つ　(6.) En cuanto a instalacion de servidor, o del IDE... ya que trabajaré con las instalaciones por defecto, no lo voy a cubrir en estos ejercicios, sin embargo, si se requiere una configuración adicional, es posible que mencione algunos pasos para configurar.... o es posible que sólo la mencione.... SI soy peresozo y que!!

----------------------------------------------
	1. Regreso al pasado
----------------------------------------------
Como el propósito del ejercicio es mostrar desde lo más básico, regresemos un poco en el tiempo y trabajemos con una de las primeras tecnologías Web que nos afreció JAVA al incurrir en la Web. Si señoras y señores, estamos hablando del JSP.
Aclaremos algo antes de que saquen sus antorchas y me tachen de hereje (porque aceptemoslo, hoy en día quien usa JSP y mucho menos con las prácticas que encontramos en este código??):
Premisas de construcción del código:
- El ejercicio se desarrollará de la forma MÁS sencilla posible, sin importar que se quebranten lás prácticas aceptadas por la comunidad hoy día. (Ya que estamos viajando en el tiempo, no tiene sentido pensar cómo lo haríamos en el presente)
- Si este paso les parece muy sencillo, burdo, o insultante a sus maravillosas habilidades, se pueden ir al infierno, para lo que me importa.
- Ya que partiremos de lo más básico, entre lo básico, construiremos sólo una página que nos ayude a consultar la información de un villano dado el nombre exacto de este.
- Además NO tendremos una base de datos donde tenemos almacenados está información... (Qué?? el director está borracho, o que?? Entonces como espera obtener la información??) Bueno, pues vean el código y se darán cuenta..... (Niños, niños.... BAJEN ESTAS ARTOCHAS POR EL AMOR DE LA DEIDAD DE SU ELECCIÓN)

----------------------------------------------
	1.1 Creando nuestra primera JSP (No es hermosa?? Quemenla antes de que se reproduzca)
----------------------------------------------
Para quienes no estan familiarizados con el concepto de una página JSP, hagamos una breve introducción:
En los principios de la arquitectura Web de Java, la base de toda página eran los servlets. Unas clases Java, quienes tenían control de como se reenderizaba la presentación de las vistas. Por ende podían, o más bien, se debía construir el html de la página en ellas (muchas veces como cadenas) y enviarlo al navegador para mostrarle la página generada al usuario. Y algunos nos filosofaremos... que problemas conlleva esto?? Si lo miramos hoy día la verdad muchos, algunos de los errores más comunes que se me ocurren, son el riesgo de inyección de HTML.... se debe usar el objeto Printer, para bajar el html o los datos al navegador... no se encontraba muy preparado para la utilizacion de Beans...

Así que en una de las evoluciones de la arquitectura Web de Java aparecieron las JSP como una alternativa de presentación a los servlets, donde lo que se buscaba era que la página fuera un fichero de texto, e incrustar código en las secciones que fuera necesario, para ello podemos usar los tags <% something = another; %>, y <%= something%> (en el siguiente parrafo veremos la simple diferencia entre los dos tags), además tenemos acceso inmediato a los objetos "request", "response", "session", "out" (similar al Printer de los servlets que mencioné antes). 

El tag <% something = another; %> ejecuta la sección de código que encierra, pero no hace ninguna modificación sobre el html de la página, mientras que el tag 
 <%= something%> imprimirá en la página el valor de la variable "something" (asumiendo que la variable esté declarada).
 
Sin embargo, una JSP al ejecutarse en el servidor de aplicaciones, termina convirtiendose en un servlet. Por lo que mayor facilidad que nos brindará es la edición del HTML como si fuera un archivo de texto normal.
 

Como pueden ver en el proyecto, sólo tenemos un proyecto WAR (Because f*ck you, that's why) para empaquetar nuestra página WEB. Como dije antes, estaremos usando el servidor Tomcat, así que sólo podremos desplegar archivos WAR.
También nuestro IDE lo configuramos para que el encoding de todos archivos quede como UTF-8, estó nos ayudará en la visualización de las páginas, y a evitar que tengamos carácteres extraños en nuestro código.
Además recordando que estamos en el pasado... (aunque tampoco quiero volver mucho) nuestro proyecto web esta configurado con la definición 2.5 de un dynamic web module.
Si entramos al navegador y vamos a la ruta de la página: http:localhost:<puerto>/villains-wiki-web/consultar_villano.jsp
Podremos ver nuestra primera página funcionando.... y si inspeccionamos el código podemos ver el uso de los tags de jsp antes descritos, así como el uso del objeto "out" para pintar en la JSP.


Como ejercicio final.... que de malo le vemos a esta página?? (seamos francos.... tiene mucho por mejorar)
1. No tenemos una base de datos, por ahora nos contentamos con simularla en memoria.
2. Dado que cada petición requiere que la página se ejecute nuevamente, la base de datos simulada se crea en memoria durante CADA UNA de esas peticiones. Esto implica que cada petición tiene su propia base de datos, y el consumo de memoria se verá afectado por el aumento de peticiones en el sitio.
3. No tenemos validaciones... incluso si sólo entramos a la página tenemos inmediatamente un mensaje que indica que no hemos encontrado al villano, AUN cuando no hemos buscado a nadie
4. No es una implementación homogenea, ya que algunas veces usamos el tag <%= %>, y otras veces usamoes el objeto "out".
5. I dare you... I double dare you motherf*cker a agregar las siguientes entradas en nuestra BD simulada y busquen a Jules Winnfield y a Me.
myVillainsData.put("Jules Winnfield", "<img src=\"http://goo.gl/B9XoGk\"");
myVillainsData.put("Me", "<img src=\"http://goo.gl/ICL6J7\"");
6. Lógica de presentación y consulta mezcladas

----------------------------------------------
	1.2 Introduciendo otro viejo amigo.... JDBC
----------------------------------------------
Viendo los muchos problemas que dejamos en nuestra versión anterior.... demos un paso hacia la mejora, y ataquemos algunos de estos puntos. Así que, dejemos de lado nuestra base de datos estatica, y construyamos un modelo de base de datos que nos ayude a soportar de mejor manera a nuestros queridisimos villanos (no esperen mucho, será un modelo MUY simple).

Como lo vengo diciendo desde hace rato..... bajen esas malditas antorchas, en este avance, al igual que en la versión anterior, el acceso a datos, la presentación, y lógica de negocio continuarán en la página JSP (SI hoy en día muchos saben hacer algo mejor que esto, pero en sus tiempos esto era el pan de cada día).

El modelo generado lo podemos encontrar en la carpeta: recursos/db/scripts/
Las credenciales con las que nos conectaremos seran;
Usuario: villainApp
Contraseña: imevil

*******************
- Corrijo y adiciono un problema fundamental entre las deficiencias de la página en la seccion 1.1
- Utilizaré MySql como motor de base de datos para los ejercicios, así que.... a instalar
*******************

En cada version realizaremos este ejercicio final.... veamos que hemos mejorado, y vemaos que le podemos mejorar a nuestra página?? (seguimos con mucho por mejorar...)
Puntos positivos:
1. Ahora si tenemos una base de datos que soporta nuestra información.
2. Es una base de datos única, y sólo se consulta un villano al tiempo, liberando un poco el problema de memoria que veíamos en la versión anterior.
Puntos negativos (sigh... aqui vamos);
1. Continuamos sin tener validaciones
2. No es una implementación homogenea, ya que algunas veces usamos el tag <%= %>, y otras veces usamoes el objeto "out".
3. Inyección de html... si estamos siendo juiciosos con la lectura... ya saben que villano buscar.
4. Lógica de presentación y consulta mezcladas
5. Cuando ejecutamos la sentencia SQL de consulta, no usamos parametros, por lo que corremos el riesgo de un ataque de inyección de SQL (vuelvance locos con el or 1=1, o hagan el drop de la base de datos... igual tienen los scripts para regenerar la base de datos)
6. Estamos asumiendo que al consultar por el nombre sólo tenemos un resultado.
7. La coneccion de la base de datos no es cerrada (Grave error)

Así que si vemos... vamos mejorando, pero nuestros problemas siguen creciendo... y ahora quien podrá ayudarnos??

----------------------------------------------
	1.2.1 Refactorizando nuestra página
----------------------------------------------
Bueno, viendo los 2 análisis anteriores, vemos problemas que son críticos a corregir, y algunos que simplemente hemos dejado pasar de largo, así que soldados de este cruel campo de batalla... les presento la navaja suiza, he digo el refactor.

El refactor es una técnica que nos ayuda a mejorar nuestro código haciendonos preguntas como, Que podría mejorar en este código? el código es legible, otra persona sería capaz de leer mi código y entender que hace?, etc.
Además la semana pasada nos llego un caso de soporte debido a que la base de datos no puede atender más solicitudes... 
Y el día de hoy dejamos quemar el chuzo, toda la información de nuestros amados villanos ha desaparecido, alguien inyecto un DELETE... así que ataqueeen!!!

Primeros pasos:
1. Liberemos recursos: cerremos debidamente la conección, el statement y el resultset.
2. Usemos el nombre del villano a buscar como un parametro en el statement de consulta.
3. Si no tenemos el nombre de un villano, no mostremos el mensaje de resultado.
4. Homogeneicemos la salida del resultado (yo optaré por usar el tag <%= %>).

----------------------------------------------
	1.3 Administrando la página
----------------------------------------------
Algunos nos preguntaremos, porque no continuamos mejorando la página, algo como, poque no evitamos la inyección de HTML, o permitimos buscar por partes del nombre del villano, o refactorizamos para que en la página soporte multiples resultados para el mismo nombre de villano..... pues la respuesta es fácil, no os apresureis, "todo a su debido tiempo".

Por ahora la administración (como agregar, actualizar o eliminar la información de un villano) esta delegada en nosotros mismos por medio de la base de datos, así que nosotros mismos podríamos evitar poner entradas que violen el html de la página.

Pero la idea es que la comunidad que use la página pueda ir enriqueciendo nuestra base de datos, así que porque no habilitamos una página que permita ingresar la información de un nuevo villano? Así que aquí vamos.

Si entramos al navegador y vamos a la ruta de la página: http:localhost:<puerto>/villains-wiki-web/ingresar_villano.jsp
veremos nuestra nueva página, y notaremos que nuestra tabla de villanos ha crecido un poco, ahora, no solo podemos tener la información del perfil, sino que podremos ingresar la ruta de una imagen para identificar a nuestro personaje.
El script para extender el moodelo lo podemos encontrar en la carpeta: recursos/db/scripts/alter_villains_add_photo.sql

Como es costumbre, el ejercicio final....
Puntos positivos:
1. No hemos cometido todos los errores de la parte anterior: mantenemos el estandar de la salida de variables con el tag <%= %>, sólo guardamos la información cuando efectivamente se le da ingresar, cerramos la coneccion a la base de datos.

Puntos negativos:
1. Nuevamente no tenemos validaciones en nuestra página
2. Dado que un usuario cualquiera puede ingresar la información, ahora si corremos un riesgo real de inyección de html en la página de busqueda.
3. Lógica de presentación y acceso a datos mezcladas
4. La información de coneccion a la base de datos está ahora por toda nuestra aplicación, esto impacta desfavorablemente la mantenibilidad de la aplicación, ya que el costo de cambiar la información de la conección se vuelve cada vez más alto (por el momento lo modificaríamos en 2 lugares)
5. No exactamente un punto negativo, pero una opción de mejora: como pueden notar, los valores que se toman del request para crear el registro en base de datos, se toman ANTES de saber si se requiere hacer el guardado, podríamos acceder a esta información, únicamente cuando confirmemos que es necesario.

----------------------------------------------
	1.4 Principios de programación
----------------------------------------------
A partir de aquí veremos unos cuantos principios, y buenas prácticas de programación, aunque la mayoría las veremos a medida que avancemos y las requiramos, por ahora les mesionare 3 set de principios (existen más, pero me parecen los 3 set más sencillos de comprender, y son de mucha utilidad), para los lectores que les guste investigar:
- El principio DRY (lo veremos inmediatamente)
- Principios SOLID
- Principios GRASP

----------------------------------------------
	1.4.1 Refactorizando coneccion a la base de datos
----------------------------------------------
Muy bien compañeros, como se anoto en los puntos negativos del ejercicio anterior, poseemos una grave falencia en la mantenibilidad de nuestra aplicación, así que porque no la correjimos??

Para ello haremos uso de un principio muy básico y general... les presentamos: (suenan trompetas) el principio DRY!!!! que suenen esos aplausos!!!!
El principio DRY es una muy, MUY, buena práctica de programación, que básicamente lo que nos habla sobre la duplicidad de código, y lo que dice sobre esta diplicidad es.... Don't Repeat Yourself (You idiot). Bueno lo último se lo agregue yo. 

El tener rutinas y código duplicado, es un problema de mantenibilidad muy grande, ya que en vez de tener un sólo punto de fallo de la aplicación, estamos multiplicando el punto de fallo tantas veces dupliquemos el código, haciendo que sea más costoso, y más riesgoso el hacer un cambio en las rutinas, ya que tenemos que tener en cuenta TODOS estos puntos, y seamos francos, quien tiene la memoria para asegurar que no se quede una rutina sin actualizar.

... pero, algunos nos preguntaremos: cómo podemos implementar este principio??
Pues realmente es un principio y una buena práctica, no hay un "como" estipulado, existen varias aproximaciones para diferentes ocurrencias. Puede ser tan fácil como simplemente aislar en una unidad de código diferente (entiendase por unidad de código, cualquier cosa dependiendo de la necesidad: metodo, clase, componente...), como crear composiciones complejas de objetos, o usar herencia... entre otras.

Hora de revisar:
Puntos positivos:
1. Level Up: Felicitaciones (en horabuena) hemos implementado una de las prácticas más importantes en el proceso de codificación de cualquier aplicación, una buena práctica tan general, que trasciende el lenguaje de programación como tal.
2. La información de coneccion a la base de datos está ahora en un único punto de nuestra aplicación, ahora realizar el cambio de nuestras credenciales, el conectarnos a una base de datos, diferente, o incluso hacer que la información de coneccion no este quemada en el código, nos implicaría únicamente cambiar la clase 'ResourceManager', y el cambio se reflejaría por toda nuestra aplicación.

Puntos negativos (No cambian mucho con respecto a lo que ya teníamos, ya que únicamente atacamos el problema de duplicidad de código:
1. Nuevamente no tenemos validaciones en nuestra página
2. Dado que un usuario cualquiera puede ingresar la información, ahora si corremos un riesgo real de inyección de html en la página de busqueda.
3. Lógica de presentación y acceso a datos mezcladas
4. No exactamente un punto negativo, pero una opción de mejora: como pueden notar, los valores que se toman del request para crear el registro en base de datos, se toman ANTES de saber si se requiere hacer el guardado, podríamos acceder a esta información, únicamente cuando confirmemos que es necesario.

Que tal si seguimos aprendiendo un poco de estos principios importantes de la programación??
En nuestro proximo programa: Principios SOLID (Bueno, sólo la S) por favor sintonizanos.

*******************
- Corrijo la enumeracion de los pasos, quito la seccion 1.3.1, y muevo el contenido a la seccion 1.4, para ver algunos principios de programación
*******************

----------------------------------------------
	1.4.2 Principio de Responsabilidad única
----------------------------------------------
Como lo prometimos, iniciaremos a ver un poco de los principios SOLID, en este caso veremos la S. Si esto suena raro, veamos un poco que son los principios SOLID.

SOLID es un acrónimo de 5 principios de programación:
S Single Responsability Principle
O Open/Close principle
L Liskov sustitution principle
I Interface segregation principle
D Dependency inversion principle

Por ahora centremonos en lo que dice el primero: 
Una unidad de código debería tener sólo una razón para cambiar
Cada responsabilidad es el eje del cambio
Para contener la propagación del cambio, debemos separar las responsabilidades.
Si una unidad de código asume más de una responsabilidad, será más sensible al cambio.
Si una unidad de código asume más de una responsabilidad, las responsabilidades se acoplan.

Aunque en algunas definiciones se acoplan con términos como "clases", prefiero dejarlo cómo unidad de código, ya que puede cumplir en cualquier nivel de abstracción. 
Por ejemplo digamos que nuestra wiki está finalizada, y veamos a que diferentes niveles de abstracción cumpliría con este principio.
Como aplicación o componente, la definimos como un wiki para compartir y encontrar información, sobre nuestros villanos favoritos.
En este momento cumple con este propósito?? SI

A nivel de clases (me gustaría tener un poco más de clases y código para marcar más claramente esto), cada clase, o JSP cumple con una única responsabilidad?? NO, tenemos en las JSP, presentación, y ejecución de acceso a datos, finalización de coneccion a base de datos.

El 'ResourceManagaer' cumple con una única responsabilidad?? SI, El ResourceManager que construimos tiene como responsabilidad la coneccion a base de datos de la aplicación, pero si nos fijamos un poco, está incompleta.
SI incompleta, si la responsabilidad es manejar la coneccion, no sería responsabilidad del ResourceManager el finalizar la coneccion también??

A nivel de métodos no podemos hacer un análisis ya que el único método claramente declarado es el que se encuentra en el ResourceManager.

En este momento, entonces sólo delegamos al ResourceManager, las operacion de coneccion a la base de datos (tanto apertura, como clausura).
En nuestra siguiente iteración, haremos algo similar para delegar el acceso a datos a otra unidad de código.

----------------------------------------------
	1.4.3 Principio de Responsabilidad única, el retorno
----------------------------------------------
Bueno, así que ya sabemos como separar las responsabilidades de los componentes de nuestra aplicación. Entonces porque no realizamos lo mismo para el acceso a datos??

Aunque en este momento definimos que nuestros villanos estan en una base de datos, se acuerdan que inicialemnte las operaciones se hacían en memoria??
Que sucede si mañana, nos piden que usemos el sistema de archivos??
o que tenemos una herramienta más avanzada para el acceso a datos, y la tenemos que implementar en nuestro sistema??

PAra resolver estas dudas (aunque soy partidario de dejarle problemas al YO del futuro) la idea no es sólo dejar problemaa, sino tambien herramientas, así que hagamos lo siguiente:
Tendremos un contrato llamado IVillansManager, que define las operaciones: getVillainByName(String) y createVillain(Villain)
En esta definición del contrato, tenemos forma de conocer de donde proviene el villano, o donde lo crearemos?? muajajaj NO, es un hueco legal!!!!
Bueno no es un hueco legal, es simplemente una forma de crear un template para separar las diferentes implementaciones que ocurran en el futuro, así podriamos tener una implementación del contrato, que usa JDBC para acceder a la información, otra implementación para usar archivos, otra implementación para JPA, etc, etc, etc...

Si entramos al navegador y vamos a la ruta de la página: http:localhost:<puerto>/villains-wiki-web/consultar_villano_memoria.jsp
podremos ver, que sólo existen 2 villanos: Loki y Me, además la descripción de Loki es diferente a la que tenemos configurada en nuestra base de datos.

Además, nuestra página consultar_villano_memoria.jsp, tiene considerablemente menos líneas de código, y no conoce como se obtiene la información que va a presentar. El sólo sabe que le pide a alguien la información, y confpia que la información obtenida es lo que debe mostrar al usuario (única responsabilidad: interactuar con el usuario).

Puntos positivos:
1. Level Up: Felicitaciones (en horabuena), así sin saber mucho de esto, hemos implemntado un patrón de diseño muy importante (posiblemente uno de los más famosos y antiguos). Tengo el placer de presentarles: El patron DAO (Data Access Object).
Nuestro nuevo amigo pretende básicamente crear una capa de acceso a datos, presentando un contrato común para la capa de negocio, y separar las diferentes implementaciones que puedan ocurrir.

Puntos no cheveres:
Sólo tenemos separada la acción de consulta en memoria.
Duplicamos nuestra página de consulta, sólo para mostrar como podríamos usar el DAO que creamos.
Cuando se implementa un patron, es una buena práctica llamar las clases con el patron usado, si nos fijamos nuestro contrato, y la clase que lo implementa, se llaman 'Manager', y no 'DAO' como es el patron que usan.

Así que nuestra próxima iteración consistirá en:
Crear nuestra implementación del DAO que se comunique la base de datos.
Tener una única página de consulta que use una u otra implementación.

----------------------------------------------
	1.4.4 Usando el patron DAO
----------------------------------------------
La mayor ventaja del patron DAO es poder cambiar el origen de información, modificar una de las implementaciones, o crear una nueva implementación teniendo plena confiaza de que las demás no se verán afectadas.

Esto nos habla de otro de los principios SOLID (se acuerdan de ellos?? volvieron!!!), y es el principio Open/Closed
Este principio nos dice que un buen código debería ser cerrado a modificaciones (el soporte es un tema aparte), y abierto a extensión. Esto quiere decir, que para modificar una funcionalidad existente, no deberíamos modificar el código que ya tenemos y sabemos que funciona, sino que deberíamos extender la funcionalidad existente.

En este caso, la funcionalidad de busqueda en memoria ya vimos que funciona en la iteración anterior, el hecho de implementar la busqueda en la base de datos, NO nos debería implicar hacer cambios en la funcionalidad de busqueda en memoria.

Pero tranquilos, como ya lo dijimos el patron DAO va muy acorde con este principio.

Así que las acciones a tomar serán las siguientes:
- Crearemos la implemntación de DAO para la base de datos
- Unificaremos la página de consulta, en la que teniamos inicialmente
- Esta página tendrá un elemento oculto que no dirá si buscaremos la información en memoria, o en base de datos (esto será temporalmente para mostrar lo sencillo que es cambiar de implementación en un patron DAO)
- El contrato del DAO y las implementaciones quedarán correctamente nombradas con el patron que implementan.
- Eliminaremos la página consulta_villanos_memoria.jsp

Resultado:
Al entrar a la página: http:localhost:<puerto>/villains-wiki-web/consultar_villano_memoria.jsp veremos un combobox que nos permite seleccionar el origen de datos, al buscar 'Loki' en ambos datasource, podemos observar diferentes resultados.

Esto es lo que llaman excelencia..... sólo que NO, mientras implementamos esta solución, cometidos varios errores que violan los principios que ya habiamos estudiado.... así que adivinen.... tenemos que hacer refactor para proteger los principios DRY y Single Responsability Principle (de ahora en adelante SRP)